// @generated by protoc-gen-es v1.7.2 with parameter "target=ts"
// @generated from file helloworld.proto (package jobManage, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from enum jobManage.Permission
 */
export enum Permission {
  /**
   * @generated from enum value: USER = 0;
   */
  USER = 0,

  /**
   * @generated from enum value: ADMIN = 1;
   */
  ADMIN = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(Permission)
proto3.util.setEnumType(Permission, "jobManage.Permission", [
  { no: 0, name: "USER" },
  { no: 1, name: "ADMIN" },
]);

/**
 * シフトが認証されているかどうかのenum
 *
 * @generated from enum jobManage.ShiftStatus
 */
export enum ShiftStatus {
  /**
   * @generated from enum value: UNAUTHORIZED = 0;
   */
  UNAUTHORIZED = 0,

  /**
   * @generated from enum value: AUTHORIZED = 1;
   */
  AUTHORIZED = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(ShiftStatus)
proto3.util.setEnumType(ShiftStatus, "jobManage.ShiftStatus", [
  { no: 0, name: "UNAUTHORIZED" },
  { no: 1, name: "AUTHORIZED" },
]);

/**
 * @generated from message jobManage.CreateGroupRequest
 */
export class CreateGroupRequest extends Message<CreateGroupRequest> {
  /**
   * @generated from field: string email = 1;
   */
  email = "";

  /**
   * @generated from field: string group_name = 2;
   */
  groupName = "";

  constructor(data?: PartialMessage<CreateGroupRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "jobManage.CreateGroupRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "group_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateGroupRequest {
    return new CreateGroupRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateGroupRequest {
    return new CreateGroupRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateGroupRequest {
    return new CreateGroupRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateGroupRequest | PlainMessage<CreateGroupRequest> | undefined, b: CreateGroupRequest | PlainMessage<CreateGroupRequest> | undefined): boolean {
    return proto3.util.equals(CreateGroupRequest, a, b);
  }
}

/**
 * @generated from message jobManage.CreateUserRequest
 */
export class CreateUserRequest extends Message<CreateUserRequest> {
  /**
   * @generated from field: string user_name = 1;
   */
  userName = "";

  /**
   * @generated from field: string email = 2;
   */
  email = "";

  /**
   * @generated from field: string password = 3;
   */
  password = "";

  /**
   * @generated from field: int32 group_id = 4;
   */
  groupId = 0;

  /**
   * @generated from field: jobManage.Permission permission = 5;
   */
  permission = Permission.USER;

  constructor(data?: PartialMessage<CreateUserRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "jobManage.CreateUserRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "group_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "permission", kind: "enum", T: proto3.getEnumType(Permission) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateUserRequest {
    return new CreateUserRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateUserRequest {
    return new CreateUserRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateUserRequest {
    return new CreateUserRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateUserRequest | PlainMessage<CreateUserRequest> | undefined, b: CreateUserRequest | PlainMessage<CreateUserRequest> | undefined): boolean {
    return proto3.util.equals(CreateUserRequest, a, b);
  }
}

/**
 * @generated from message jobManage.CreateUserResponse
 */
export class CreateUserResponse extends Message<CreateUserResponse> {
  /**
   * @generated from field: string token = 1;
   */
  token = "";

  constructor(data?: PartialMessage<CreateUserResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "jobManage.CreateUserResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateUserResponse {
    return new CreateUserResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateUserResponse {
    return new CreateUserResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateUserResponse {
    return new CreateUserResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateUserResponse | PlainMessage<CreateUserResponse> | undefined, b: CreateUserResponse | PlainMessage<CreateUserResponse> | undefined): boolean {
    return proto3.util.equals(CreateUserResponse, a, b);
  }
}

/**
 * @generated from message jobManage.LoginUserRequest
 */
export class LoginUserRequest extends Message<LoginUserRequest> {
  /**
   * @generated from field: string email = 1;
   */
  email = "";

  /**
   * @generated from field: string password = 2;
   */
  password = "";

  constructor(data?: PartialMessage<LoginUserRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "jobManage.LoginUserRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LoginUserRequest {
    return new LoginUserRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LoginUserRequest {
    return new LoginUserRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LoginUserRequest {
    return new LoginUserRequest().fromJsonString(jsonString, options);
  }

  static equals(a: LoginUserRequest | PlainMessage<LoginUserRequest> | undefined, b: LoginUserRequest | PlainMessage<LoginUserRequest> | undefined): boolean {
    return proto3.util.equals(LoginUserRequest, a, b);
  }
}

/**
 * @generated from message jobManage.LoginUserResponse
 */
export class LoginUserResponse extends Message<LoginUserResponse> {
  /**
   * @generated from field: string token = 1;
   */
  token = "";

  constructor(data?: PartialMessage<LoginUserResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "jobManage.LoginUserResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LoginUserResponse {
    return new LoginUserResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LoginUserResponse {
    return new LoginUserResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LoginUserResponse {
    return new LoginUserResponse().fromJsonString(jsonString, options);
  }

  static equals(a: LoginUserResponse | PlainMessage<LoginUserResponse> | undefined, b: LoginUserResponse | PlainMessage<LoginUserResponse> | undefined): boolean {
    return proto3.util.equals(LoginUserResponse, a, b);
  }
}

/**
 * @generated from message jobManage.Date
 */
export class Date extends Message<Date> {
  /**
   * @generated from field: int32 year = 1;
   */
  year = 0;

  /**
   * @generated from field: int32 month = 2;
   */
  month = 0;

  /**
   * @generated from field: int32 day = 3;
   */
  day = 0;

  constructor(data?: PartialMessage<Date>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "jobManage.Date";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "year", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "month", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "day", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Date {
    return new Date().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Date {
    return new Date().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Date {
    return new Date().fromJsonString(jsonString, options);
  }

  static equals(a: Date | PlainMessage<Date> | undefined, b: Date | PlainMessage<Date> | undefined): boolean {
    return proto3.util.equals(Date, a, b);
  }
}

/**
 * @generated from message jobManage.Time
 */
export class Time extends Message<Time> {
  /**
   * @generated from field: int32 hour = 1;
   */
  hour = 0;

  /**
   * @generated from field: int32 minute = 2;
   */
  minute = 0;

  constructor(data?: PartialMessage<Time>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "jobManage.Time";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "hour", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "minute", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Time {
    return new Time().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Time {
    return new Time().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Time {
    return new Time().fromJsonString(jsonString, options);
  }

  static equals(a: Time | PlainMessage<Time> | undefined, b: Time | PlainMessage<Time> | undefined): boolean {
    return proto3.util.equals(Time, a, b);
  }
}

/**
 * @generated from message jobManage.Shift
 */
export class Shift extends Message<Shift> {
  /**
   * @generated from field: jobManage.Date date = 1;
   */
  date?: Date;

  /**
   * @generated from field: jobManage.Time start = 2;
   */
  start?: Time;

  /**
   * @generated from field: jobManage.Time end = 3;
   */
  end?: Time;

  /**
   * @generated from field: jobManage.ShiftStatus status = 4;
   */
  status = ShiftStatus.UNAUTHORIZED;

  constructor(data?: PartialMessage<Shift>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "jobManage.Shift";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "date", kind: "message", T: Date },
    { no: 2, name: "start", kind: "message", T: Time },
    { no: 3, name: "end", kind: "message", T: Time },
    { no: 4, name: "status", kind: "enum", T: proto3.getEnumType(ShiftStatus) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Shift {
    return new Shift().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Shift {
    return new Shift().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Shift {
    return new Shift().fromJsonString(jsonString, options);
  }

  static equals(a: Shift | PlainMessage<Shift> | undefined, b: Shift | PlainMessage<Shift> | undefined): boolean {
    return proto3.util.equals(Shift, a, b);
  }
}

/**
 * @generated from message jobManage.CreateShiftRequest
 */
export class CreateShiftRequest extends Message<CreateShiftRequest> {
  /**
   * @generated from field: repeated jobManage.Shift shifts = 1;
   */
  shifts: Shift[] = [];

  constructor(data?: PartialMessage<CreateShiftRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "jobManage.CreateShiftRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "shifts", kind: "message", T: Shift, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateShiftRequest {
    return new CreateShiftRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateShiftRequest {
    return new CreateShiftRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateShiftRequest {
    return new CreateShiftRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateShiftRequest | PlainMessage<CreateShiftRequest> | undefined, b: CreateShiftRequest | PlainMessage<CreateShiftRequest> | undefined): boolean {
    return proto3.util.equals(CreateShiftRequest, a, b);
  }
}

/**
 * @generated from message jobManage.GetShiftsResponse
 */
export class GetShiftsResponse extends Message<GetShiftsResponse> {
  /**
   * @generated from field: repeated jobManage.Shift shifts = 1;
   */
  shifts: Shift[] = [];

  /**
   * @generated from field: int32 total_time = 2;
   */
  totalTime = 0;

  constructor(data?: PartialMessage<GetShiftsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "jobManage.GetShiftsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "shifts", kind: "message", T: Shift, repeated: true },
    { no: 2, name: "total_time", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetShiftsResponse {
    return new GetShiftsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetShiftsResponse {
    return new GetShiftsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetShiftsResponse {
    return new GetShiftsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetShiftsResponse | PlainMessage<GetShiftsResponse> | undefined, b: GetShiftsResponse | PlainMessage<GetShiftsResponse> | undefined): boolean {
    return proto3.util.equals(GetShiftsResponse, a, b);
  }
}

/**
 * @generated from message jobManage.Group
 */
export class Group extends Message<Group> {
  /**
   * @generated from field: string group_name = 1;
   */
  groupName = "";

  /**
   * @generated from field: int32 group_id = 2;
   */
  groupId = 0;

  constructor(data?: PartialMessage<Group>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "jobManage.Group";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "group_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "group_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Group {
    return new Group().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Group {
    return new Group().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Group {
    return new Group().fromJsonString(jsonString, options);
  }

  static equals(a: Group | PlainMessage<Group> | undefined, b: Group | PlainMessage<Group> | undefined): boolean {
    return proto3.util.equals(Group, a, b);
  }
}

/**
 * @generated from message jobManage.GetAllGroupResponse
 */
export class GetAllGroupResponse extends Message<GetAllGroupResponse> {
  /**
   * @generated from field: repeated jobManage.Group groups = 1;
   */
  groups: Group[] = [];

  constructor(data?: PartialMessage<GetAllGroupResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "jobManage.GetAllGroupResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "groups", kind: "message", T: Group, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAllGroupResponse {
    return new GetAllGroupResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAllGroupResponse {
    return new GetAllGroupResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAllGroupResponse {
    return new GetAllGroupResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetAllGroupResponse | PlainMessage<GetAllGroupResponse> | undefined, b: GetAllGroupResponse | PlainMessage<GetAllGroupResponse> | undefined): boolean {
    return proto3.util.equals(GetAllGroupResponse, a, b);
  }
}

